#version 460
#extension GL_EXT_ray_tracing : require

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
	vec4 lightPos;
} cam;

struct RayPayload {
	vec3 color;
	float distance;
	vec3 normal;
	float reflector;
};

//layout(location = 0) rayPayloadEXT vec3 hitValue;	// ray tracing output
layout(location = 0) rayPayloadEXT RayPayload rayPayload;

void main() 
{
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);	// pixel position
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);	// pixel position in WdC
	vec2 d = inUV * 2.0 - 1.0;	// pixel position in NDC

	vec4 origin = cam.viewInverse * vec4(0,0,0,1);	// camera position in WC
	vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;	// (Xe/Wc, Ye/Wc, Ze/Wc, 1/Wc)
	vec4 direction = cam.viewInverse*vec4(normalize(target.xyz / target.w), 0) ;
	// pixel position in WC, w좌표를 0으로 하여 vector 가 된다.
	// normalize는 왜 또 하는지 모르겠다.

	uint rayFlags = gl_RayFlagsOpaqueEXT;	// NO any-hit
	uint cullMask = 0xff;
	float tmin = 0.001;
	float tmax = 10000.0;

//	traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
//
//	//imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 0.0));
//	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(rayPayload.color, 0.0));

	vec3 color = vec3(0.0);

	for (int i = 0; i < 3; i++) {
		traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
		vec3 hitColor = rayPayload.color;

		if (rayPayload.distance < 0.0f) {	// miss shader 다녀온 거면
			color += hitColor;
			break;
		} else if (rayPayload.reflector == 1.0f) {	// chit shader 다녀왔는데 reflector 이면
			const vec4 hitPos = origin + direction * rayPayload.distance;
			origin.xyz = hitPos.xyz + rayPayload.normal * 0.001f;
			direction.xyz = reflect(direction.xyz, rayPayload.normal);

//			if (i == 2) {
//				color = vec3(1.0f, 0.0f, 0.0f);
//			}
		} else {	// chit shader 다녀왔는데 reflector 아니면
			color += hitColor;
			break;
		}

	}

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 0.0));
}
